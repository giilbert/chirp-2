generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol", "fullTextSearch"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  userId      String   @id @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  username    String   @unique
  displayName String
  bio         String   @db.Text @default("") 
  headerUrl   String?

  following   Profile[] @relation("Follows")
  followers   Profile[] @relation("Follows")

  chirps      Chirp[]
  likes       Like[]
}

model Chirp {
  id        String   @id @default(cuid())
  body      String   @db.Text
  createdAt DateTime @default(now())

  authorId String
  author   Profile @relation(fields: [authorId], references: [userId])

  quotedFromId String?
  quotedFrom   Chirp?  @relation(fields: [quotedFromId], references: [id], name: "ChirpQuotedFrom", onDelete: NoAction, onUpdate: NoAction)

  rechirpedFromId String?
  rechirpedFrom   Chirp?  @relation(fields: [rechirpedFromId], references: [id], name: "ChirpRechirps", onDelete: NoAction, onUpdate: NoAction)

  replyingToId String?
  replyingTo   Chirp?  @relation(fields: [replyingToId], references: [id], name: "ChirpReplyingTo", onDelete: NoAction, onUpdate: NoAction)

  replies  Chirp[]   @relation("ChirpReplyingTo")
  rechirps Chirp[]   @relation("ChirpRechirps")
  quotedBy Chirp[]   @relation("ChirpQuotedFrom")
  media    ChirpMedia[]
  likes    Like[]
  hashtags Hashtag[]

  @@index([quotedFromId])
  @@index([rechirpedFromId])
  @@index([replyingToId])
  @@index([authorId])
}

model ChirpMedia {
  id String @id @default(cuid())

  mediaType MediaType
  mediaUrl  String    @unique

  chirpId String
  chirp   Chirp  @relation(fields: [chirpId], references: [id], onDelete: Cascade)

  @@index([chirpId])
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

model Like {
  chirpId String
  chirp   Chirp  @relation(fields: [chirpId], references: [id])

  userId String
  user   Profile @relation(fields: [userId], references: [userId])

  @@id([chirpId, userId])
  @@index([chirpId])
  @@index([userId])
}

model Hashtag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())

  chirps Chirp[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
